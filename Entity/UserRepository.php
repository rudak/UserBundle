<?php

namespace Rudak\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
	/*
	 * Utilisé pour le login
	 */
	public function loadUserByUsername($username)
	{
		$q = $this->getFindUserQuery($username);

		try {
			$user = $q->getSingleResult();
		} catch (NoResultException $e) {
			$message = sprintf(
				'Unable to find an active admin AcmeUserBundle:User object identified by "%s".',
				$username
			);
			throw new UsernameNotFoundException($message, 0, $e);
		}

		return $user;
	}

	private function getFindUserQuery($username)
	{
		return $this
			->createQueryBuilder('u')
			->where('u.username = :username OR u.email = :email')
			->setParameter('username', $username)
			->setParameter('email', $username)
			->getQuery();
	}

	/*
	 * Renvoie le Query qui va bien
	 */

	/**
	 * Vérifie que l'username ou le mot de passe correspond a un user
	 * @param $username
	 * @return mixed
	 * @throws \Doctrine\ORM\NonUniqueResultException
	 */
	public function checkIfUserExists($username)
	{
		$qb = $this->getFindUserQuery($username);
		return $qb->getOneOrNullResult();
	}

	public function refreshUser(UserInterface $user)
	{
		$class = get_class($user);
		if (!$this->supportsClass($class)) {
			throw new UnsupportedUserException(
				sprintf(
					'Instances of "%s" are not supported.',
					$class
				)
			);
		}

		return $this->find($user->getId());
	}

	public function supportsClass($class)
	{
		return $this->getEntityName() === $class
		|| is_subclass_of($class, $this->getEntityName());
	}

	public function getUserIfExists($username)
	{
		$q = $this
			->createQueryBuilder('u')
			->where('u.username = :username OR u.email = :email')
			->setParameter('username', $username)
			->setParameter('email', $username)
			->getQuery();
		return $q->getOneOrNullResult();
	}

	public function getUserByHash($hash)
	{
		$qb = $this
			->createQueryBuilder('u')
			->where('u.securityHash = :hash')->setParameter('hash', $hash)
			->getQuery();
		return $qb->getOneOrNullResult();
	}


	public function getExpiredHashes()
	{
		$qb = $this
			->createQueryBuilder('u')
			->where('u.SecurityHashExpireAt < :now')->setParameter('now', new \Datetime())
			->getQuery();
		return $qb->execute();
	}
}